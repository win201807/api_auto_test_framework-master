{"name": "真实大学——四川轻化工大学", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <daxue.TestCaseDaXue object at 0x000001DDE963FCA0>\n\n    @allure.title(\"真实大学——四川轻化工大学\")\n    def test1(self):\n>       DaXue().daxue(\"data/req.yml\")\n\ncases\\daxue.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\napi\\daxue.py:38: in daxue\n    res = self.api_temp(self.url, self.method, self.content_type, data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <api.daxue.DaXue object at 0x000001DDE963FE80>\nrequest_url = '/equipment_type/type/search_type_by_typename_or_model'\nmethod = 'GET', content_type = 'application/json'\ndata = {'req': {'pageNum': 1, 'pageSize': 10}, 'res': {'code': 200, 'message': '操作成功'}}\n\n    def api_temp(self, request_url, method, content_type, data) -> dict:\n        \"\"\"\n        接口请求封装\n        :param request_url: Request URL\n        :param method: Request Method\n        :param content_type: ContentType\n        :param data: 请求参数\n        :return:\n        \"\"\"\n    \n        # 判断请求数据格式 data/json/params\n        data_type = \"\"\n        method = method.upper()\n        if method == \"POST\":\n            if content_type == \"application/x-www-form-urlencoded\":\n                data_type = \"data\"\n            elif content_type == \"application/json\":\n                data_type = \"json\"\n        elif method == \"GET\":\n            data_type = \"params\"\n        else:\n            self.logger.error(\"method或content_type有误！\")\n        req = {\n            \"url\": self.config[\"url\"] + request_url,\n            \"method\": method,\n            \"headers\": self.config[\"headers\"],\n            data_type: data[\"req\"]\n        }\n        self.logger.info(\"请求数据：\" + str(req))\n        res = self.requests_http(req)\n        assert res.status_code == 200\n        res_json = res.json()\n        self.logger.debug(\"响应数据：\" + str(res_json))\n        for key in data[\"res\"]:\n            \"\"\" 断言结果 \"\"\"\n            actual = jsonpath.jsonpath(res_json, \"$..{}\".format(key))[0]  # 默认第一个\n            expect = data[\"res\"][key]\n            self.logger.info(\"实际结果：{}={}，预期结果：{}={}\".format(key, actual, key, expect))\n>           assert actual == expect\nE           AssertionError\n\nbase_api.py:80: AssertionError"}, "attachments": [{"name": "log", "source": "eb33690c-236d-48a8-8d3b-2eaa24a2d6a7-attachment.txt", "type": "text/plain"}], "start": 1661235948506, "stop": 1661235948842, "uuid": "cb36cf47-e487-41b4-884e-94c184a4980d", "historyId": "e6059610fd5f4574e8e63892f0364831", "testCaseId": "300a889c6a281d3fc8c6baa37985ebe7", "fullName": "cases.daxue.TestCaseDaXue#test1", "labels": [{"name": "parentSuite", "value": "cases"}, {"name": "suite", "value": "daxue"}, {"name": "subSuite", "value": "TestCaseDaXue"}, {"name": "host", "value": "F1335884-PC-1"}, {"name": "thread", "value": "11804-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "cases.daxue"}]}