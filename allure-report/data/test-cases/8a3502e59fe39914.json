{"uid":"8a3502e59fe39914","name":"真实大学——四川轻化工大学","fullName":"cases.daxue.TestCaseDaXue#test1","historyId":"e6059610fd5f4574e8e63892f0364831","time":{"start":1661233123443,"stop":1661233123654,"duration":211},"status":"broken","statusMessage":"TypeError: 'bool' object is not subscriptable","statusTrace":"self = <daxue.TestCaseDaXue object at 0x000002B64705FD00>\n\n    @allure.title(\"真实大学——四川轻化工大学\")\n    def test1(self):\n>       DaXue().daxue(\"data/req.yml\")\n\ncases\\daxue.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\napi\\daxue.py:38: in daxue\n    res = self.api_temp(self.url, self.method, self.content_type, data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <api.daxue.DaXue object at 0x000002B64705FEE0>\nrequest_url = '/equipment_type/type/search_type_by_typename_or_model'\nmethod = 'GET', content_type = 'application/json'\ndata = {'req': {'pageNum': 1, 'pageSize': 10}, 'res': {'code': '4151010622', 'name': '四川轻化工大学', 'status': 1}}\n\n    def api_temp(self, request_url, method, content_type, data) -> dict:\n        \"\"\"\n        接口请求封装\n        :param request_url: Request URL\n        :param method: Request Method\n        :param content_type: ContentType\n        :param data: 请求参数\n        :return:\n        \"\"\"\n    \n        # 判断请求数据格式 data/json/params\n        data_type = \"\"\n        method = method.upper()\n        if method == \"POST\":\n            if content_type == \"application/x-www-form-urlencoded\":\n                data_type = \"data\"\n            elif content_type == \"application/json\":\n                data_type = \"json\"\n        elif method == \"GET\":\n            data_type = \"params\"\n        else:\n            self.logger.error(\"method或content_type有误！\")\n        req = {\n            \"url\": self.config[\"url\"] + request_url,\n            \"method\": method,\n            \"headers\": self.config[\"headers\"],\n            data_type: data[\"req\"]\n        }\n        self.logger.info(\"请求数据：\" + str(req))\n        res = self.requests_http(req)\n        assert res.status_code == 200\n        res_json = res.json()\n        self.logger.debug(\"响应数据：\" + str(res_json))\n        for key in data[\"res\"]:\n            \"\"\" 断言结果 \"\"\"\n>           actual = jsonpath.jsonpath(res_json, \"$..{}\".format(key))[0]  # 默认第一个\nE           TypeError: 'bool' object is not subscriptable\n\nbase_api.py:77: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestCaseDaXue","time":{"start":1661233123439,"stop":1661233123441,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"TypeError: 'bool' object is not subscriptable","statusTrace":"self = <daxue.TestCaseDaXue object at 0x000002B64705FD00>\n\n    @allure.title(\"真实大学——四川轻化工大学\")\n    def test1(self):\n>       DaXue().daxue(\"data/req.yml\")\n\ncases\\daxue.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\napi\\daxue.py:38: in daxue\n    res = self.api_temp(self.url, self.method, self.content_type, data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <api.daxue.DaXue object at 0x000002B64705FEE0>\nrequest_url = '/equipment_type/type/search_type_by_typename_or_model'\nmethod = 'GET', content_type = 'application/json'\ndata = {'req': {'pageNum': 1, 'pageSize': 10}, 'res': {'code': '4151010622', 'name': '四川轻化工大学', 'status': 1}}\n\n    def api_temp(self, request_url, method, content_type, data) -> dict:\n        \"\"\"\n        接口请求封装\n        :param request_url: Request URL\n        :param method: Request Method\n        :param content_type: ContentType\n        :param data: 请求参数\n        :return:\n        \"\"\"\n    \n        # 判断请求数据格式 data/json/params\n        data_type = \"\"\n        method = method.upper()\n        if method == \"POST\":\n            if content_type == \"application/x-www-form-urlencoded\":\n                data_type = \"data\"\n            elif content_type == \"application/json\":\n                data_type = \"json\"\n        elif method == \"GET\":\n            data_type = \"params\"\n        else:\n            self.logger.error(\"method或content_type有误！\")\n        req = {\n            \"url\": self.config[\"url\"] + request_url,\n            \"method\": method,\n            \"headers\": self.config[\"headers\"],\n            data_type: data[\"req\"]\n        }\n        self.logger.info(\"请求数据：\" + str(req))\n        res = self.requests_http(req)\n        assert res.status_code == 200\n        res_json = res.json()\n        self.logger.debug(\"响应数据：\" + str(res_json))\n        for key in data[\"res\"]:\n            \"\"\" 断言结果 \"\"\"\n>           actual = jsonpath.jsonpath(res_json, \"$..{}\".format(key))[0]  # 默认第一个\nE           TypeError: 'bool' object is not subscriptable\n\nbase_api.py:77: TypeError","steps":[],"attachments":[{"uid":"d774f7f97a4c599c","name":"log","source":"d774f7f97a4c599c.txt","type":"text/plain","size":2297}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestCaseDaXue::0","time":{"start":1661233123835,"stop":1661233123835,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"parentSuite","value":"cases"},{"name":"suite","value":"daxue"},{"name":"subSuite","value":"TestCaseDaXue"},{"name":"host","value":"F1335884-PC-1"},{"name":"thread","value":"1504-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"cases.daxue"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"8a3502e59fe39914.json","parameterValues":[]}