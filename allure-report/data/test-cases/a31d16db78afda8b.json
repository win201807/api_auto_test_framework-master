{"uid":"a31d16db78afda8b","name":"真实大学——四川轻化工大学","fullName":"cases.daxue.TestCaseDaXue#test1","historyId":"e6059610fd5f4574e8e63892f0364831","time":{"start":1661249136636,"stop":1661249137035,"duration":399},"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <daxue.TestCaseDaXue object at 0x000001E755AFBD60>\n\n    @allure.title(\"真实大学——四川轻化工大学\")\n    def test1(self):\n>       DaXue().daxue(\"data/req.yml\")\n\ncases\\daxue.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\napi\\daxue.py:38: in daxue\n    res = self.api_temp(self.url, self.method, self.content_type, data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <api.daxue.DaXue object at 0x000001E755B680D0>\nrequest_url = '/equipment_type/type/search_type_by_typename_or_model'\nmethod = 'GET', content_type = 'application/json'\ndata = {'req': {'pageNum': 1, 'pageSize': 10}, 'res': {'code': 200, 'message': '操作成功'}}\n\n    def api_temp(self, request_url, method, content_type, data) -> dict:\n        \"\"\"\n        接口请求封装\n        :param request_url: Request URL\n        :param method: Request Method\n        :param content_type: ContentType\n        :param data: 请求参数\n        :return:\n        \"\"\"\n    \n        # 判断请求数据格式 data/json/params\n        data_type = \"\"\n        method = method.upper()\n        if method == \"POST\":\n            if content_type == \"application/x-www-form-urlencoded\":\n                data_type = \"data\"\n            elif content_type == \"application/json\":\n                data_type = \"json\"\n        elif method == \"GET\":\n            data_type = \"params\"\n        else:\n            self.logger.error(\"method或content_type有误！\")\n        req = {\n            \"url\": self.config[\"url\"] + request_url,\n            \"method\": method,\n            \"headers\": self.config[\"headers\"],\n            data_type: data[\"req\"]\n        }\n        self.logger.info(\"请求数据：\" + str(req))\n        res = self.requests_http(req)\n        assert res.status_code == 200\n        res_json = res.json()\n        self.logger.debug(\"响应数据：\" + str(res_json))\n        for key in data[\"res\"]:\n            \"\"\" 断言结果 \"\"\"\n            actual = jsonpath.jsonpath(res_json, \"$..{}\".format(key))[0]  # 默认第一个\n            expect = data[\"res\"][key]\n            self.logger.info(\"实际结果：{}={}，预期结果：{}={}\".format(key, actual, key, expect))\n>           assert actual == expect\nE           AssertionError\n\nbase_api.py:80: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":13,"retriesStatusChange":true,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestCaseDaXue","time":{"start":1661249136573,"stop":1661249136613,"duration":40},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <daxue.TestCaseDaXue object at 0x000001E755AFBD60>\n\n    @allure.title(\"真实大学——四川轻化工大学\")\n    def test1(self):\n>       DaXue().daxue(\"data/req.yml\")\n\ncases\\daxue.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\napi\\daxue.py:38: in daxue\n    res = self.api_temp(self.url, self.method, self.content_type, data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <api.daxue.DaXue object at 0x000001E755B680D0>\nrequest_url = '/equipment_type/type/search_type_by_typename_or_model'\nmethod = 'GET', content_type = 'application/json'\ndata = {'req': {'pageNum': 1, 'pageSize': 10}, 'res': {'code': 200, 'message': '操作成功'}}\n\n    def api_temp(self, request_url, method, content_type, data) -> dict:\n        \"\"\"\n        接口请求封装\n        :param request_url: Request URL\n        :param method: Request Method\n        :param content_type: ContentType\n        :param data: 请求参数\n        :return:\n        \"\"\"\n    \n        # 判断请求数据格式 data/json/params\n        data_type = \"\"\n        method = method.upper()\n        if method == \"POST\":\n            if content_type == \"application/x-www-form-urlencoded\":\n                data_type = \"data\"\n            elif content_type == \"application/json\":\n                data_type = \"json\"\n        elif method == \"GET\":\n            data_type = \"params\"\n        else:\n            self.logger.error(\"method或content_type有误！\")\n        req = {\n            \"url\": self.config[\"url\"] + request_url,\n            \"method\": method,\n            \"headers\": self.config[\"headers\"],\n            data_type: data[\"req\"]\n        }\n        self.logger.info(\"请求数据：\" + str(req))\n        res = self.requests_http(req)\n        assert res.status_code == 200\n        res_json = res.json()\n        self.logger.debug(\"响应数据：\" + str(res_json))\n        for key in data[\"res\"]:\n            \"\"\" 断言结果 \"\"\"\n            actual = jsonpath.jsonpath(res_json, \"$..{}\".format(key))[0]  # 默认第一个\n            expect = data[\"res\"][key]\n            self.logger.info(\"实际结果：{}={}，预期结果：{}={}\".format(key, actual, key, expect))\n>           assert actual == expect\nE           AssertionError\n\nbase_api.py:80: AssertionError","steps":[],"attachments":[{"uid":"5d3c1eeb7947f1d4","name":"log","source":"5d3c1eeb7947f1d4.txt","type":"text/plain","size":726}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestCaseDaXue::0","time":{"start":1661249137217,"stop":1661249137217,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"parentSuite","value":"cases"},{"name":"suite","value":"daxue"},{"name":"subSuite","value":"TestCaseDaXue"},{"name":"host","value":"F1335884-PC-1"},{"name":"thread","value":"17632-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"cases.daxue"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"8bdc648b5ae4e362","status":"failed","statusDetails":"AssertionError","time":{"start":1661240187757,"stop":1661240188108,"duration":351}},{"uid":"174887e2b8dfeda7","status":"failed","statusDetails":"AssertionError","time":{"start":1661240040423,"stop":1661240040636,"duration":213}},{"uid":"52e8cf4a2482d70f","status":"failed","statusDetails":"AssertionError","time":{"start":1661239940926,"stop":1661239941246,"duration":320}},{"uid":"7df33892c0d1e516","status":"failed","statusDetails":"AssertionError","time":{"start":1661239705558,"stop":1661239705991,"duration":433}},{"uid":"d51217c3f4505528","status":"failed","statusDetails":"AssertionError","time":{"start":1661237664446,"stop":1661237664808,"duration":362}},{"uid":"3c146f349cfcd4b9","status":"failed","statusDetails":"AssertionError","time":{"start":1661237016847,"stop":1661237017148,"duration":301}},{"uid":"e2dacf302c5e0585","status":"passed","time":{"start":1661236011724,"stop":1661236011965,"duration":241}},{"uid":"c488987e4d5ac895","status":"failed","statusDetails":"AssertionError","time":{"start":1661235948506,"stop":1661235948842,"duration":336}},{"uid":"f6eb0d71997f669f","status":"passed","time":{"start":1661234571086,"stop":1661234571372,"duration":286}},{"uid":"25bcb8d5163683ed","status":"passed","time":{"start":1661234307844,"stop":1661234308390,"duration":546}},{"uid":"d59f5f1cc3098f81","status":"broken","statusDetails":"TypeError: 'bool' object is not subscriptable","time":{"start":1661233459019,"stop":1661233459358,"duration":339}},{"uid":"8a3502e59fe39914","status":"broken","statusDetails":"TypeError: 'bool' object is not subscriptable","time":{"start":1661233123443,"stop":1661233123654,"duration":211}},{"uid":"6fddcecaebdee2b5","status":"broken","statusDetails":"TypeError: 'bool' object is not subscriptable","time":{"start":1661232960648,"stop":1661232961053,"duration":405}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"a31d16db78afda8b.json","parameterValues":[]}